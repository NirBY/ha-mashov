blueprint:
  name: Mashov – Daily Homework & Behavior Announcement (Trace-friendly)
  description: >
    Announces today's behavior & homework at 15:00, skips nights & holidays,
    raises volume, speaks (Hebrew), then restores volume.
    This version is TRACE-FRIENDLY: every decision path has an alias and a reason.
  source_url: https://raw.githubusercontent.com/NirBY/ha-mashov/main/blueprints/automation/mashov/mashov_daily_homework_announce.yaml
  domain: automation
  input:
    holiday_sensor:
      name: Holiday sensor (Mashov)
      description: Entity with Items[] of date ranges (start/end ISO) – e.g. sensor.mashov_holidays
      selector: { entity: { domain: sensor } }

    homework_sensor:
      name: Homework sensor (Mashov)
      description: Entity with Items[] with lesson_date, subject_name, homework
      selector: { entity: { domain: sensor } }

    behavior_sensor:
      name: Behavior sensor (Mashov)
      description: Entity with Items[] with lesson_date, subject, achva_name
      selector: { entity: { domain: sensor } }

    media_player:
      name: Speaker media_player
      selector: { entity: { domain: media_player } }

    run_time:
      name: Daily run time
      description: "Default 15:00 (local time)"
      default: "15:00:00"
      selector: { time: {} }

    max_volume:
      name: Temporary max volume for announcement
      default: 1.0
      selector: { number: { min: 0.1, max: 1.0, step: 0.05, mode: slider } }

    tts_language:
      name: TTS language
      description: Default Google Translate Hebrew is "iw" (also accepts "he")
      default: iw
      selector: { text: {} }

mode: restart

# Simple time trigger; ALL logic is traced inside the action choose paths.
trigger:
  - alias: "Daily schedule"
    platform: time
    at: !input run_time

variables:
  holiday_sensor: !input holiday_sensor
  homework_sensor: !input homework_sensor
  behavior_sensor: !input behavior_sensor
  media_player: !input media_player
  max_volume: !input max_volume
  tts_language: !input tts_language

  # Window for allowed hours (for traces & manual runs)
  allow_start: "07:00:00"
  allow_end:   "22:00:00"
  now_time: "{{ now().time() }}"

  student_name: >
    {{ state_attr(behavior_sensor,'Student name')
       or state_attr(homework_sensor,'Student name')
       or state_attr(behavior_sensor,'student_name')
       or state_attr(homework_sensor,'student_name')
       or 'התלמיד/ה' }}

  # Build today's homework summary (subject: homework)
  todays_homework: >
    {% set items = state_attr(homework_sensor,'Items') or state_attr(homework_sensor,'items') or [] %}
    {% set today = now().date() %}
    {% set lines = [] %}
    {% for it in items %}
      {% if it.lesson_date is defined and it.lesson_date %}
        {% if as_datetime(it.lesson_date).date() == today %}
          {% set subj = it.subject_name or it.subject or 'מקצוע' %}
          {% set hw = (it.homework or it.remark or '') | replace('\n',' ') %}
          {% set lines = lines + [subj ~ ': ' ~ hw] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ lines | join(' ; ') }}

  # Build today's behavior summary (subject: achva_name)
  todays_behavior: >
    {% set items = state_attr(behavior_sensor,'Items') or state_attr(behavior_sensor,'items') or [] %}
    {% set today = now().date() %}
    {% set lines = [] %}
    {% for it in items %}
      {% if it.lesson_date is defined and it.lesson_date %}
        {% if as_datetime(it.lesson_date).date() == today %}
          {% set subj = it.subject or 'מקצוע' %}
          {% set tag  = it.achva_name or it.event or 'אירוע' %}
          {% set lines = lines + [subj ~ ': ' ~ tag] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ lines | join(' ; ') }}

  has_data_today: >
    {{ (todays_homework | trim | length > 0) or (todays_behavior | trim | length > 0) }}

  # Holiday check (inclusive end)
  in_holiday_today: >
    {% set items = state_attr(holiday_sensor,'Items') or state_attr(holiday_sensor,'items') or [] %}
    {% set today = now().date() %}
    {% set ih = false %}
    {% for it in items %}
      {% set s = (as_datetime(it.start).date() if (it.start is defined and it.start) else none) %}
      {% set e = (as_datetime(it.end).date()   if (it.end   is defined and it.end)   else s) %}
      {% if s and (today >= s) and (today <= e) %}
        {% set ih = true %}
      {% endif %}
    {% endfor %}
    {{ ih }}

  announcement_text: >
    {% set parts = ['שלום ' ~ student_name] %}
    {% if todays_behavior | trim | length > 0 %}
      {% set parts = parts + ['התנהגות היום: ' ~ todays_behavior] %}
    {% endif %}
    {% if todays_homework | trim | length > 0 %}
      {% set parts = parts + ['שיעורי בית היום: ' ~ todays_homework] %}
    {% endif %}
    {{ parts | join('. ') }}

action:
  - alias: "Decision tree (why/what chosen) – see Traces"
    choose:

      # --- Night guard path ---
      - alias: "Skip: Night hours ({{ now_time }}) not in {{ allow_start }}–{{ allow_end }}"
        conditions:
          - condition: template
            alias: "Is night?"
            value_template: >
              {{ not (now().time() >= strptime(allow_start, '%H:%M:%S').time()
                       and now().time() <= strptime(allow_end, '%H:%M:%S').time()) }}
        sequence:
          - alias: "Reason logged"
            service: logbook.log
            data:
              name: "Mashov announce"
              message: "Skipped: Night window. Now={{ now_time }} Allow={{ allow_start }}–{{ allow_end }}"
              entity_id: !input media_player
          - stop: "Stop: outside allowed hours"
            error: false

      # --- Holiday path ---
      - alias: "Skip: Today is a holiday"
        conditions:
          - condition: template
            alias: "In-holiday?"
            value_template: "{{ in_holiday_today }}"
        sequence:
          - alias: "Reason logged"
            service: logbook.log
            data:
              name: "Mashov announce"
              message: "Skipped: Holiday detected by {{ holiday_sensor }}."
              entity_id: !input holiday_sensor
          - stop: "Stop: holiday"
            error: false

      # --- No data path ---
      - alias: "Skip: No data for today (homework & behavior empty)"
        conditions:
          - condition: template
            alias: "Has data today?"
            value_template: "{{ not has_data_today }}"
        sequence:
          - alias: "Reason logged"
            service: logbook.log
            data:
              name: "Mashov announce"
              message: "Skipped: No items for today. HW='{{ todays_homework }}' | Behave='{{ todays_behavior }}'"
          - stop: "Stop: no data today"
            error: false

      # --- Main announce path ---
      - alias: "Announce: Speak homework & behavior"
        conditions:
          - condition: template
            alias: "Proceed?"
            value_template: "{{ has_data_today and (not in_holiday_today) and
                               (now().time() >= strptime(allow_start, '%H:%M:%S').time()) and
                               (now().time() <= strptime(allow_end,  '%H:%M:%S').time()) }}"
        sequence:
          - alias: "Snapshot previous volume"
            variables:
              prev_vol: "{{ state_attr(media_player,'volume_level') }}"

          - alias: "Set max volume"
            service: media_player.volume_set
            target: { entity_id: !input media_player }
            data:
              volume_level: "{{ max_volume }}"

          - alias: "Wait volume to apply (≤5s)"
            wait_template: >
              {{ (state_attr(media_player,'volume_level') or 0) >= (max_volume | float - 0.02) }}
            timeout: "00:00:05"
            continue_on_timeout: true

          - alias: "Speak via Google Translate"
            service: tts.google_translate_say
            target: { entity_id: !input media_player }
            data:
              message: "{{ announcement_text }}"
              language: !input tts_language

          # Legacy example if needed:
          # - alias: "Speak via Google Translate (legacy)"
          #   service: tts.google_translate_say
          #   target: { entity_id: !input media_player }
          #   data:
          #     message: "{{ announcement_text }}"
          #     language: he

          - alias: "Wait TTS end (≤2m)"
            wait_template: >
              {{ states(media_player) not in ['playing','buffering'] }}
            timeout: "00:02:00"
            continue_on_timeout: true

          - alias: "Restore previous volume (if known)"
            if:
              - condition: template
                alias: "Has previous volume?"
                value_template: "{{ prev_vol is number }}"
            then:
              - alias: "Restore"
                service: media_player.volume_set
                target: { entity_id: !input media_player }
                data:
                  volume_level: "{{ prev_vol }}"

    default: []
