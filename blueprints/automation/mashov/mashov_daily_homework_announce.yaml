blueprint:
  name: Mashov – Daily Homework & Behavior Announcement
  description: >
    Reads today's homework and behavior over a speaker, once a day at 15:00,
    skipping nights and holidays. Temporarily raises volume to max, speaks in Hebrew,
    then restores the previous volume after TTS finishes. Works with Mashov sensors
    that expose Items[] in attributes.
  domain: automation
  input:
    holiday_sensor:
      name: Holiday sensor (Mashov)
      description: Entity with Items[] of date ranges (start/end ISO) – e.g. sensor.mashov_holidays
      selector: { entity: { domain: sensor } }

    homework_sensor:
      name: Homework sensor (Mashov)
      description: Entity with Items[] with lesson_date, subject_name, homework
      selector: { entity: { domain: sensor } }

    behavior_sensor:
      name: Behavior sensor (Mashov)
      description: Entity with Items[] with lesson_date, subject, achva_name
      selector: { entity: { domain: sensor } }

    media_player:
      name: Speaker media_player
      selector: { entity: { domain: media_player } }

    run_time:
      name: Daily run time
      description: Defaults to 15:00 (local time)
      default: "15:00:00"
      selector: { time: {} }

    max_volume:
      name: Temporary max volume for announcement
      default: 1.0
      selector: { number: { min: 0.1, max: 1.0, step: 0.05, mode: slider } }

    tts_service:
      name: TTS service to call
      description: >
        Recommended: tts.speak (unified TTS). If using legacy Google Translate,
        switch the action block below (commented alternative).
      default: tts.speak
      selector: { text: {} }

    tts_language:
      name: TTS language
      default: he-IL
      selector: { text: {} }

mode: restart

trigger:
  - platform: time
    at: !input run_time

condition:
  - condition: time
    after: "07:00:00"
    before: "22:00:00"

  - condition: template
    value_template: >
      {% set items = state_attr(holiday_sensor,'Items') or state_attr(holiday_sensor,'items') or [] %}
      {% set today = now().date() %}
      {% set in_holiday = false %}
      {% for it in items %}
        {% set s = (as_datetime(it.start).date() if (it.start is defined and it.start) else none) %}
        {% set e = (as_datetime(it.end).date()   if (it.end   is defined and it.end)   else none) %}
        {% if s and e and (today >= s) and (today < e) %}
          {% set in_holiday = true %}
        {% elif s and not e and (today == s) %}
          {% set in_holiday = true %}
        {% endif %}
      {% endfor %}
      {{ not in_holiday }}

variables:
  holiday_sensor: !input holiday_sensor
  homework_sensor: !input homework_sensor
  behavior_sensor: !input behavior_sensor
  media_player: !input media_player
  max_volume: !input max_volume
  tts_service: !input tts_service
  tts_language: !input tts_language

  student_name: >
    {{ state_attr(behavior_sensor,'Student name')
       or state_attr(homework_sensor,'Student name')
       or state_attr(behavior_sensor,'student_name')
       or state_attr(homework_sensor,'student_name')
       or 'התלמיד/ה' }}

  todays_homework: >
    {% set items = state_attr(homework_sensor,'Items') or state_attr(homework_sensor,'items') or [] %}
    {% set today = now().date() %}
    {% set lines = [] %}
    {% for it in items %}
      {% if it.lesson_date is defined and it.lesson_date %}
        {% if as_datetime(it.lesson_date).date() == today %}
          {% set subj = it.subject_name or it.subject or 'מקצוע' %}
          {% set hw = (it.homework or it.remark or '') | replace('\n',' ') %}
          {% set lines = lines + [subj ~ ': ' ~ hw] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ lines | join(' ; ') }}

  todays_behavior: >
    {% set items = state_attr(behavior_sensor,'Items') or state_attr(behavior_sensor,'items') or [] %}
    {% set today = now().date() %}
    {% set lines = [] %}
    {% for it in items %}
      {% if it.lesson_date is defined and it.lesson_date %}
        {% if as_datetime(it.lesson_date).date() == today %}
          {% set subj = it.subject or 'מקצוע' %}
          {% set tag  = it.achva_name or it.event or 'אירוע' %}
          {% set lines = lines + [subj ~ ': ' ~ tag] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ lines | join(' ; ') }}

  has_data_today: >
    {{ (todays_homework | trim | length > 0) or (todays_behavior | trim | length > 0) }}

  announcement_text: >
    {% set parts = ['שלום ' ~ student_name] %}
    {% if todays_behavior | trim | length > 0 %}
      {% set parts = parts + ['התנהגות היום: ' ~ todays_behavior] %}
    {% endif %}
    {% if todays_homework | trim | length > 0 %}
      {% set parts = parts + ['שיעורי בית היום: ' ~ todays_homework] %}
    {% endif %}
    {{ parts | join('. ') }}

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ has_data_today }}"
        sequence:
          - variables:
              prev_vol: "{{ state_attr(media_player,'volume_level') }}"
          - service: media_player.volume_set
            target: { entity_id: !input media_player }
            data:
              volume_level: "{{ max_volume }}"
          - wait_template: >
              {{ (state_attr(media_player,'volume_level') or 0) >= (max_volume | float - 0.02) }}
            timeout: "00:00:05"
            continue_on_timeout: true
          - service: "{{ tts_service }}"
            data:
              media_player_entity_id: !input media_player
              message: "{{ announcement_text }}"
              language: "{{ tts_language }}"
              cache: false
          # Legacy example:
          # - service: tts.google_translate_say
          #   target: { entity_id: !input media_player }
          #   data:
          #     message: "{{ announcement_text }}"
          #     language: he
          - wait_template: >
              {{ states(media_player) not in ['playing','buffering'] }}
            timeout: "00:02:00"
            continue_on_timeout: true
          - if:
              - condition: template
                value_template: "{{ prev_vol is number }}"
            then:
              - service: media_player.volume_set
                target: { entity_id: !input media_player }
                data:
                  volume_level: "{{ prev_vol }}"
    default: []
