name: Create Release on Tag

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to release/edit (e.g., v0.1.61-beta.2)'
        required: true
      prerelease:
        description: 'Mark as pre-release (true/false). If empty, auto-detect by tag suffix.'
        required: false
        default: ''

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve tag name
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            echo "tag=${{ github.event.inputs.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      - name: Extract CHANGELOG section for this tag (pre-release notes)
        id: changelog
        shell: bash
        run: |
          set -e
          TAG="${{ steps.vars.outputs.tag }}"
          BODY_FILE="RELEASE_BODY.md"
          if [[ ! -f CHANGELOG.md ]]; then
            echo "CHANGELOG.md not found" >&2
            printf "Release %s\n\nNo changelog available.\n" "$TAG" > "$BODY_FILE"
          else
            # Extract from line starting with '## [TAG]' until next '## ['
            awk -v tag="$TAG" '
              $0 ~ "^## \\[" tag \\]" {capture=1; next}
              capture && $0 ~ /^## \[/ {exit}
              capture {print}
            ' CHANGELOG.md > "$BODY_FILE"
            # Fallback if nothing captured
            if [[ ! -s "$BODY_FILE" ]]; then
              printf "Changes for %s\n\n- No specific entries found in CHANGELOG.\n" "$TAG" > "$BODY_FILE"
            fi
          fi
          echo "body_path=$BODY_FILE" >> "$GITHUB_OUTPUT"

      - name: Determine prerelease flag
        id: flags
        shell: bash
        run: |
          INPUT_PRERELEASE="${{ github.event.inputs.prerelease }}"
          if [[ -n "$INPUT_PRERELEASE" ]]; then
            echo "prerelease=$INPUT_PRERELEASE" >> "$GITHUB_OUTPUT"
          else
            if [[ "${{ steps.vars.outputs.tag }}" == *-* ]]; then
              echo "prerelease=true" >> "$GITHUB_OUTPUT"
            else
              echo "prerelease=false" >> "$GITHUB_OUTPUT"
            fi
          fi

      - name: Create or update GitHub Release
        if: ${{ steps.flags.outputs.prerelease == 'false' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: Release ${{ steps.vars.outputs.tag }}
          body_path: CHANGELOG.md
          prerelease: ${{ steps.flags.outputs.prerelease }}
          draft: false
          generate_release_notes: true

      - name: Ensure prerelease flag when needed (edit existing)
        if: ${{ steps.flags.outputs.prerelease == 'true' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -e
          TAG="${{ steps.vars.outputs.tag }}"
          BODY_FILE="${{ steps.changelog.outputs.body_path }}"
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release edit "$TAG" --prerelease --notes-file "$BODY_FILE" --title "Release $TAG"
          else
            gh release create "$TAG" --prerelease --title "Release $TAG" --notes-file "$BODY_FILE"
          fi

